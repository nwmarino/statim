__memcpy :: (__d: *void, __s: *void, __n: i64) -> void {
    ___d: *void, align 8
    ___n: i64, align 8
    ___s: *void, align 8
    _dst: *i8, align 8
    _src: *i8, align 8

    bb0: {
        v2 = Reinterpret *void __d -> *i8
        ... 2 uses
        v4 = Reinterpret *void __s -> *i8
        ... 2 uses
        Jump bb1
    }

    bb1(bb0, bb2): {
        v6 = CmpINE i1, i64 __n, i64 0
        ... 1 uses
        BranchIf i1 v6, bb2, bb3
    }

    bb2(bb1): {
        v9 = AP *i8, v4, i64 __n
        ... 1 uses
        v10 = Load i8, *i8 v9, align 1
        ... 1 uses
        v13 = AP *i8, v2, i64 __n
        ... 1 uses
        Store i8 v10, *i8 v13, align 1
        v15 = ISub i64, __n, 1
        ... 1 uses
        Jump bb1
    }

    bb3(bb1): {
        Return 
    }
}

bar :: (x: i64) -> i64 {
    _x: i64, align 8

    bb0: {
        v17 = CmpSGT i1, i64 x, i64 5
        ... 1 uses
        BranchIf i1 v17, bb1, bb2
    }

    bb1(bb0): {
        Jump bb2
    }

    bb2(bb0, bb1): {
        v25 = Phi i64, bb0 x, bb1 5
        ... 1 uses
        Return i64 v25
    }
}

foo :: (x: i64) -> i64 {
    _x: i64, align 8

    bb0: {
        v20 = IAdd i64, x, 1
        ... 1 uses
        Return i64 v20
    }
}

main :: () -> void {
    bb0: {
        v21 = Call i64 foo(5)
        ... 0 uses
        Return 
    }
}


