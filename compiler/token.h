#ifndef SKVOZ_TOKEN_H_
#define SKVOZ_TOKEN_H_

#include "common.h"
#include "metadata.h"

typedef enum {
    SK_TOKEN_KIND_IDENTIFIER,
    SK_TOKEN_KIND_LINE_COMMENT,
    SK_TOKEN_KIND_BLOCK_COMMENT,
    SK_TOKEN_KIND_END_OF_FILE,
    SK_TOKEN_KIND_SET_BRACE,
    SK_TOKEN_KIND_END_BRACE,
    SK_TOKEN_KIND_SET_PAREN,
    SK_TOKEN_KIND_END_PAREN,
    SK_TOKEN_KIND_SET_BRACKET,
    SK_TOKEN_KIND_END_BRACKET,
    SK_TOKEN_KIND_AT,
    SK_TOKEN_KIND_HASH,
    SK_TOKEN_KIND_SIGN,
    SK_TOKEN_KIND_PLUS,
    SK_TOKEN_KIND_PLUS_PLUS,
    SK_TOKEN_KIND_PLUS_EQUALS,
    SK_TOKEN_KIND_MINUS,
    SK_TOKEN_KIND_MINUS_MINUS,
    SK_TOKEN_KIND_MINUS_EQUALS,
    SK_TOKEN_KIND_STAR,
    SK_TOKEN_KIND_STAR_EQUALS,
    SK_TOKEN_KIND_SLASH,
    SK_TOKEN_KIND_SLASH_EQUALS,
    SK_TOKEN_KIND_PERCENT,
    SK_TOKEN_KIND_PERCENT_EQUALS,
    SK_TOKEN_KIND_EQUALS,
    SK_TOKEN_KIND_EQUALS_EQUALS,
    SK_TOKEN_KIND_BANG,
    SK_TOKEN_KIND_BANG_EQUALS,
    SK_TOKEN_KIND_LEFT,
    SK_TOKEN_KIND_LEFT_LEFT,
    SK_TOKEN_KIND_LEFT_EQUALS,
    SK_TOKEN_KIND_RIGHT,
    SK_TOKEN_KIND_RIGHT_RIGHT,
    SK_TOKEN_KIND_RIGHT_EQUALS,
    SK_TOKEN_KIND_AND,
    SK_TOKEN_KIND_AND_AND,
    SK_TOKEN_KIND_AND_EQUALS,
    SK_TOKEN_KIND_OR,
    SK_TOKEN_KIND_OR_OR,
    SK_TOKEN_KIND_OR_EQUALS,
    SK_TOKEN_KIND_XOR,
    SK_TOKEN_KIND_XOR_EQUALS,
    SK_TOKEN_KIND_DOT,
    SK_TOKEN_KIND_COMMA,
    SK_TOKEN_KIND_COLON,
    SK_TOKEN_KIND_PATH,
    SK_TOKEN_KIND_SEMICOLON,
    SK_TOKEN_KIND_APOSTROPHE,
    SK_TOKEN_KIND_TILDE,
    SK_TOKEN_KIND_GRAVE,
    SK_TOKEN_KIND_LITERAL_INTEGER,
    SK_TOKEN_KIND_LITERAL_FLOAT,
    SK_TOKEN_KIND_LITERAL_CHARACTER,
    SK_TOKEN_KIND_LITERAL_STRING,
} SkTokenKind;

typedef struct {
    SkTokenKind     kind;
    SkMetadata      meta;
    char*           pValue;
} SkToken;

#endif // SKVOZ_TOKEN_H_
