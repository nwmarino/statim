use "mem.stm";

$[public, intrinsic]
String :: struct {
private:
    _M_data: mut *char,
    _M_size: mut u64,
    _M_capacity: mut u64,
}

$public
string_new :: (self: mut *String) -> s64 {
    $assert(self != null && "string cannot be null!");

    self._M_data = null;
    self._M_size = 0;
    self._M_capacity = 0;
    ret 0;
}

$public
string_from :: (self: mut *String, str: *char) -> s64 {
    $assert(self != null && "string cannot be null!");

    let len: mut u64 = 0;
    while str[len] != '\0'
        len++;

    self._M_data = malloc(sizeof(char) * (len + 1));
    if !self._M_data
        ret -1;

    memcpy(self._M_data, str, len);
    self._M_data[len + 1] = '\0';
    self._M_size = len;
    self._M_capacity = len + 1;
    ret 0;

}

$public
string_destroy :: (self: mut *String) -> void {
    $assert(self != null && "string cannot be null!");

    if self._M_capacity != 0
        free(self._M_data);

    self._M_data = null;
    self._M_size = 0;
    self._M_capacity = 0;
}

$public
string_data :: (self: *String) -> *char {
    $assert(self != null && "string cannot be null!");
    ret self._M_data;
}

$public
string_size :: (self: *String) -> u64 {
    $assert(self != null && "string cannot be null!");
    ret self._M_size;
}

$public
string_capacity :: (self: *String) -> u64 {
    $assert(self != null && "string cannot be null!");
    ret self._M_capacity;
}

$public
string_append :: (self: mut *String, str: String) -> void {
    $assert(self != null && "string cannot be null!");

    if string_size(&str) == 0
        ret;

    let new_length: u64 = self._M_capacity + string_size(&str);
    if self._M_capacity < new_length {
        self._M_capacity = new_length * 2 + 1;
        let new_data: *char = malloc(self._M_capacity * sizeof(char));

        if self._M_data != null {
            memcpy(new_data, self._M_data, self._M_size);
            free(self._M_data);
        }

        self._M_data = new_data;
    }

    memcpy(self._M_data + self._M_size, string_data(&str), string_size(&str));
    self._M_size = new_length;
    self._M_data[new_length] = '\0';
}
