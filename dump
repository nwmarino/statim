AST <samples/return_zero.stm>
`-Function <1:1/13:1> main '() -> i64'
  `-Block <1:17/13:1>
    `-Variable <2:5/2:20> x 'i64'
      `-Integer <2:18/2:18> 42 'i64'
    `-If <4:5/8:5>
      `-Reference <4:8/4:8> 'x' i64
      `-Block <4:10/6:5>
        `-Binary <5:9/5:13> = i64
          `-Reference <5:9/5:9> 'x' i64
          `-Integer <5:13/5:13> 0 'i64'
    `-While <8:5/12:5>
      `-Reference <8:11/8:11> 'x' i64
      `-Block <8:13/10:5>
        `-Reference <9:9/9:9> 'x' i64
    `-Return <12:5/12:10>
      `-Reference <12:9/12:9> 'x' i64

Bytecode for 'main () -> i64'

    ... offset: 8, name: x

bb0:

return_zero.stm:2       0|   const   v1 = 42
return_zero.stm:2       1|     mov   v1, [stack+8] :8b
return_zero.stm:4       2|     mov   [stack+8], v2 :8b
return_zero.stm:4       3|      br   v2, bb1, bb2

bb1:

return_zero.stm:6       4|     jmp   bb2

bb2:

return_zero.stm:8       5|     jmp   bb3

bb3:

return_zero.stm:8       6|     mov   [stack+8], v3 :8b
return_zero.stm:8       7|      br   v3, bb4, bb5

bb4:

return_zero.stm:9       8|     mov   [stack+8], v4 :8b
return_zero.stm:10      9|     jmp   bb3

bb5:

return_zero.stm:12     10|     mov   [stack+8], v5 :8b
return_zero.stm:12     11|     ret   v5

